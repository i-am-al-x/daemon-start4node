#!/bin/sh
# Shell script "..../init.d/node4_xxxx_"
# Template is "node4_xxxx_ in directory "daemon_start4node/start-stop/init.d/"
# Template is Copyright 2021 Alexander R Danel

# This script is intended for directory "/etc/init.d".

# - You might want to copy the entire "start-stop" directory to be 
#   under your source code control system.  You will be modifying
#   the template files to create your own custom scripts.
#
# - The whole system is interconnected, and depends upon, the token 
#   that is templated here as "node4_xxxx_".
#
# - You will replace the "_xxxx_" part of the token with the name of your
#   server.  So, if your server is called "travel" then your version of
#   this token would be "node4travel" (replacing "node4_xxxx_" everywhere).
#
# - Rename this file to match your token.
#
# - Modify the contents of this file by replacing "_xxxx_" with the name 
#   of your server.
#
# - Also, you must create a symbolic link, somewhere, such that the link
#   points at the "node" interpreter and the link name is your token.
#   So, you will do something like:
#     $ sudo ln -s /usr/bin/node  /opt/local/bin/node4_xxxx_
#   For example, if your server were named "travel", the command  would be:
#     $ sudo ln -s /usr/bin/node  /opt/local/bin/node4travel
#   See also "absolutePathToEXEC", below.
#
# - For those configuration parameters that are particular for each 
#   instalation, your server should get those values via Unix environment 
#   variables.  The variables and their values are defined in a file named
#   by the token and placed in /etc/sysconfig. For example, the config
#   file for a server named "travel" is "/etc/sysconfig/node4travel".
#

#set -x

thisScript=$(basename "$0")
daemonName=$(basename "$0")

# === node4_xxxx_ ===
# This script starts and stops the "_xxxx_" daemon.
# The app "_xxxx_" is (__describe_the_product__).

# This script benefited from a study of code and concepts in the "node-startup" 
# package found on 'github', and from various scripts found in "/etc/init.d" 
# on AWS Linux.

# ------------------------------------------------------------------------------
# Fulfill "chkconfig" requirements.
#
# Important!
# Be sure to change the script-name, hard coded, in the "chkconfig" section,
# below.  Don't be fooled by the fact that it seems to be commented out.
# It is essential that the name be correct in those lines.
# The field "Provides:" must reflect the name of this script, so that you can 
# use this specially formatted text as input to the "chkconfig" program.

# The information is actually included twice -- older style and newer style.

# Here is header recognizable by "chkconfig" command, in the old style. 
# This is the style used on many systems, still.
# A run_level like 2345 indicates 2, 3, 4, and 5.  A run_level '-' means "none".
# Fields are:
#	{run_level}  {start_priority}  {stop_priority}
#...............................................................................
# chkconfig: 2345 85 15
# description: The 'node4_xxxx_' script starts app '_xxxx_' running under \
#		'node'.  The app '_xxxx_' is ...(describe)
#...............................................................................

# New LSB-style init stanzas follow.
# These will be used insead of the above "chkconfig:" line, if LSB applies.
# Parameter 'Required-Start' lists dependencies; affects ordering at boot time;
# see LSB doc for definitions.
# Note: rigid formatting from "BEGIN INIT" through "END INIT".
#...............................................................................
### BEGIN INIT INFO
# Provides: node4_xxxx_
# Required-Start:    $network $remote_fs $local_fs
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: App '_xxxx_' under 'node' as daemon.
# Description: The 'node4_xxxx_' script starts app '_xxxx_' running under \
#		'node'.  The app '_xxxx_' is ...(describe).
### END INIT INFO
#...............................................................................

# ------------------------------------------------------------------------------
# For info about "LSB" expectations, "Linux Standard Base" compliance,
# see https://refspecs.linuxbase.org/LSB_3.0.0/LSB-PDA/LSB-PDA/set1.html
#  Chapter '8'   System Inialization
#  Page    '8.2' Init Script Actions
#
# This script is not (yet) compliant; but there are no glaring problems.
# For example, compliance is lacking regarding the adherance to LSB expectations about
# "exit" codes.  
#
# The script naming rules, "8.7 Script Names," present a problem here because 
# LSB names are forbidden to use the characters hyphen '-' and underscore '_'.
# In particular, hyphen '-' is reserved for expressing hierarchy.
# Names are supposed to be registered with www.lanana.org; (yah, sure).
#
# A standards compliant script will generally take advantage of one of the 
# following, but this script does not:
#
#	/etc/init.d/functions
#	/lib/lsb/init-functions

# ------------------------------------------------------------------------------
# To introduce this script into the boot up configuration, for Linux, (not
# Apple), the configuration is under directories /etc/rc, /etc/rc0.d, 
# /etc/rc1.d, ..., /etc/rc6.d, and /etc/rc.d.  The "rc?.d" directories 
# represent the 6 different run levels.  Typically a daemon runs only when
# the level is 2, 3, 4, or 5.
#
# No longer configured with manual edits; use a tool to help.
# Generally speaking, the program to use is:
#
#    chkconfig
#
# For AWS, AmazonLinux2, "chkconfig" is supersceded by:
#
#    systemctl
#
# Neither is available on Apple OS X.

# ------------------------------------------------------------------------------
# The absolute path to the executable program
# Note that a copy of, or link to, the executable was made, so that it
# can have the unique name 'node4_xxxx_'.  This allows a sensible value 
# when setting 'daemonName' based upon 'basename'.  The unique name might be 
# helpful when looking up stuff in the '/proc' file system
# 
# Repeating for emphasis: You create a link named 'node4_xxxx_'.
# This is a link to "node" itself; it's the javascript interpreter, and
# is not your javascript code.  Your server is run by the interpreter,
# so it is the interpreter that shows up as a process in the Unix/Linux
# 'ps' command and in the '/proc' file system.
# 
# Tip: Put the executable someplace that is **not**  mentioned in PATH setting
# for user and root.  Otherwise, confusion is likely to occur because the 
# binary (or link to it) has the same name as this script.  Both are named 
# "node_xxxx_" and both are executable.  During development, while the 
# script is in the current directory, the intention might be to execute the 
# local script by using "./node4_xxxx_", which has the local path "./"
# specified, but contrary to intention, the "./" might get omitted and 
# "node4_xxxx_" gets typed at the command line.  The desired behavior is 
# that errant command should get a response of "not found".  The undesired 
# behavior is that the binary of the same name gets found and executed. 
# So, put the binary someplace that is not in $PATH.
# Suggestion: Create directory "/opt/local/bin", and dont include it in PATH.

case $( uname -n ) in 
    # Note: The machine names illustrated here happen to have an IP number as part of
    # the name, merely to imitate the fact that AWS likes to name its machines that way.
    # Adjust script for your needs.  You might not need any "case" statement; if the 
    # script serves just one machine "absolutePathToExec" can be set unconditionally.
    ip-42-42-42-42)  #  PROD
	#absolutePathToEXEC="/home/alexander/.nvm/versions/node/v13.8.0/bin/${daemonName}";
	absolutePathToEXEC="/opt/local/bin/${daemonName}";
	;;
    ip-7-11-42-42)  # TEST
	absolutePathToEXEC="/home/my_user_name/.nvm/versions/node/v13.8.0/bin/${daemonName}";
	;;
    ip-192-168-*)  # dev machine
	absolutePathToEXEC="/usr/local/bin/${daemonName}";
	;;
    My-Mac-mini.local)  # dev machine, alternate "uname -n" result
	absolutePathToEXEC="/usr/local/bin/${daemonName}";
	;;
    *) # fall through
        echo "Dont know path to executable on unknown host $( uname -n )"
        exit 1
	;;
esac
[ -x $absolutePathToEXEC ] || {
  echo "No such file, or not executable: $absolutePathToEXEC";
  exit 1;
}

# ------------------------------------------------------------------------------
# Do shell "source" of the system level library having shared functions
# (not used)
# 
# . /etc/rc.d/init.d/functions
# -- or --
# . /lib/lsb/init-functions

# ------------------------------------------------------------------------------
# The "defaults" directory can be use for system configuration that does not 
# necessarily have to change for every different install location.
# This is optional.

[ -f /etc/default/${daemonName} ] && . /etc/default/${daemonName}

# This script will source the configuration file that is specified by 
# the variable:
#
#    daemonSysconfigName
#
# The default value for this variable is:
#
#    /etc/sysconfig/${daemonName}
#
# However, if the variable is already defined within the current shell,
# that value will be used; it will not be over-written by the default.
# The default assignment is correct for "production" mode; while in
# "development" mode, the variable will almost certainly need to be pre-set
# to some custom path that identifies the config file to use during development.
# The following command line will assign the default value to the variable,
# unless the variable was set and exported prior to invoking this daemon
# script.  

: ${daemonSysconfigName:=/etc/sysconfig/${daemonName}};

[ -r $daemonSysconfigName ] || {
  echo "File not found or not readable: $daemonSysconfigName" >&2;
  exit 1;
}

# Source the config
. $daemonSysconfigName 

# Additional background information:
# For this product, the "sysconfig" file is used for all configuration 
# information, even information not specific to the launch daemon.
# Some other products use "sysconfig" just for information relevant to 
# launching the daemon, and then have another source
# for information relevant to the product after it has launched.  
# For example, 'nginx' uses 'sysconfig' only for stuff like the system 
# level 'NICE' value, but then has an entire directory full of configuration
# information in custom directory "/etc/nginx".  From there it can source
# a config file like "/etc/nginx/nginx.conf".  There is no need for such
# complexity here.

# For config values that are customized for a particular machine or customer,
# and that do not change when software is updated, and that are not about
# the system, (ie. not appropriate for "sysconfig"), further levels of config 
# can be put into directory:
#
#   /etc/${daemonName}/
#
# When some portion of this config info is to be transmitted to the 
# server via shell environment vars, do so here. 

[ -r "/etc/${daemonName}/${daemonName}.conf" ] && . "/etc/${daemonName}/${daemonName}.conf"

# ------------------------------------------------------------------------------
# Additional background information:
# Documented Unix/Linux concepts, which may or may not be programs or functions
# available on a particular system.  The "sourced-function-script" will be one
# of either the older style "/etc/init.d/functions" or the newer style
# "/lib/lsb/init-functions"
# 
#
#	killall			program		/usr/bin
#	killproc		function	. /etc/init.d/functions
#	daemon			function	. /etc/init.d/functions
#	start-stop-daemon	?
#	start_daemon		function	. /lib/lsb/init-functions
#	stop_daemon 		function	. /lib/lsb/init-functions
#
# Discussion about "killproc" and "killall":
# The "killall" program is available on Mac OS X and on AWS Linux.
# There is no "killproc" (as a program) on either OS X nor AWS.
# The generally available "man" page for "killproc" is not applicable for AWS,
# since on AWS "killproc" does not exist as a program.  On AWS, "killproc"
# is just a Shell function, (see file "/etc/rc.d/init.d/functions"), and 
# it does not adhere to expectations presented in the "man" page.
# None-the-less, it should be noted for the benefit of those who do read the
# "man" page, that the role of "pidfile" (in the real "killproc") seems 
# counter-intuitive.
# The "killproc" concept is (apparently) that the pid is not needed, it is
# sufficient to merely provide the full path of the executable, and all matching
# instances will be killed.  (Possibly replaced by "killall", which needs only
# the base-name of the target.) In this scenario, "killproc" only needs the 
# argument "-p pidfile" so that the "pidfile" can be deleted, and "killproc"
# has no interest in the content of the file (i.e., no interest in the PID).
# (Can there be more than one "pidfile"? If so, how is that expressed?)
# This idea of killing via executable name might have some advantages, 
# but for "node", or for that matter, for any command interpreter, this causes
# a problem since the same executable might be used in more than one daemon.
# That is a good reason to create a a custom, uniquely named link to "node" 
# executable, and use that name within the daemon.
# (But of course, "killproc" is not actually used in this script, and even
# if it were, the AWS function with that name **does** use the PID.
# However, this script does adhere to the convention that the executable's
# basename is expected to be the daemonName.)

# ------------------------------------------------------------------------------
# Additional background information:
# The following command will source the AWS script file that defines 
# a lot of functions that could be useful for start-stop scripts.
# The "daemon" and "killproc" functions for AWS are defined there. 
# This script doesn't use those, but there are other interesting functions
# that might be useful.
# Note: The directories "/etc/init.d" and "/etc/rc.d" do not exist on Mac OS X.
#     .  /etc/rc.d/init.d/functions
#
# ------------------------------------------------------------------------------
# Additional background information:
# On Mac OS X, by default, the Apache deamon "httpd" is running on ports 80 
# and 443.  Want to stop it, and prevent it from running again.
#
# Can try these, to stop it once:
#
#   sudo apachectl stop
#
#   sudo killall httpd
#
# To permanently stop if from launching, (but not uninstall) try:
#
#  sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist
#
# or
#  sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.server.httpd
# 
# ------------------------------------------------------------------------------

# function maybeTrySudo  _______________________________________________
maybeTrySudo() {
  if [ "$(id -u)" != "0" ]; then
    echo "Not running as 'root'; maybe try 'sudo'. ";
    return 1
  fi
  return 0;
}

# function checkConfig  _______________________________________________
checkConfig() {
  : ${SERVER_DIR:?must be defined in the sysconfig file}
  [ -d ${SERVER_DIR} ] || {
    echo "Missing required SERVER_DIR directory: ${SERVER_DIR}";
    return 1;
  }
  [ -x ${SERVER_DIR} ] || {
    echo "This user cant change directory to SERVER_DIR: ${SERVER_DIR}";
    return 1;
  }
  
  : ${LOG_DIR:?must be defined in the sysconfig file}
  [ -d ${LOG_DIR} ] || {
    echo "Missing required LOG_DIR directory: ${LOG_DIR}";
    return 1;
  }
  [ -w ${LOG_DIR} ] || {
    maybeTrySudo;
    echo "This user cant write to LOG_DIR directory: ${LOG_DIR}";
    return 1;
  }
  
  : ${PID_DIR:?must be defined in the sysconfig file}
  [ -d ${PID_DIR} ] || {
    echo "Missing required PID_DIR directory: ${PID_DIR}";
    return 1;
  }
  [ -w ${PID_DIR} ] || {
    maybeTrySudo;
    echo "This user cant write to PID_DIR directory: ${PID_DIR}";
    return 1;
  }
  return 0; # 'true', the config matches the hierarchy
}

# function showConfig  _________________________________________________________
showConfig() {
  # Explicit list of vars need by daemon-launcher and server,
  # plus $* adds vars specific to the app;
  echo;
  echo "========== vars used by script when launching daemon =========="
  local -a varNames=(
	daemonName nodeListenPort 
	MY_APP_NM  DNS_SHORT_NM DB_CHOICE DEV_REPOSITORY
	WEB_DIR    SERVER_DIR   LOG_DIR   PID_DIR 
        nodeServerMainJs
	);
  local vName;
  for vName in ${varNames[*]} ; do
    echo "$vName: '$( eval "echo \${$vName}" )'";
  done;
  echo "=============== vars intended for use by server ==============="
  local -a varNames=(
	isServerDevMode   isSSL 
	sslCertificateDir ssl_key ssl_cert ssl_ca_1 ssl_ca_2 
        );
  for vName in ${varNames[*]} ; do
    echo "$vName: '$( eval "echo \${$vName}" )'";
  done;
  if (( $# > 0 )) ; then
    echo "========== additional vars for this particular server ========="
    local -a varNames=( $@ );
    for vName in ${varNames[*]} ; do
      echo "$vName: '$( eval "echo \${$vName}" )'";
    done;
  fi;
  echo;
  return 0;
}

# function confirmVarHasReadableFileName _______________________________________
confirmVarHasReadableFileName() {
  while (( $#  )) ; do 
    local VAR=$1;
    local FILE_NM=$( eval "echo \"\$$VAR\"" );
    shift;
    if [ -n "$FILE_NM" ]  ; then
      if [ ! -r "$FILE_NM" ] ; then
        echo "For '$VAR', can not read file '$FILE_NM'";
        return 1;
      fi;
    fi;
  done
  return 0;
}

# function confirmNeworkingIsUp  _______________________________________________
confirmNetworkingIsUp() {
  # Note: The directory "/etc/sysconfig" does not exist on Mac OS X.
  if [ -f /etc/sysconfig/network ] ; then
    # Source networking configuration.
    . /etc/sysconfig/network
    # Check that networking is up.
    [ "$NETWORKING" = "no" ] && {
      echo "According to /etc/sysconfig/network, networking is not running";
      return 1;
    }
  fi;
  return 0;
}

# function lowest_unused_fd ____________________________________________________
lowest_unused_fd() {
  # For "bash" version 4.1 and higher, and for "zsh", this is replaced by the
  # more modern operator "{fd}", used like this:
  #    exec {FD}>myFile.txt; echo "hello" >&$FD;
  # Here is a universal way to do it; thanks to KingPong and Bruno Bronsky.
  # Relies on the fact that "/dev/fd" is custom per distinct shell instance.
  /bin/ls /dev/fd  |
    sed 's/.*\///' |
    sort -n        |
    awk 'n<$1{exit}{n=$1+1}END{print n}'
}

# function sayPortStatus  ______________________________________________________
sayPortStatus() {
  local PORT_TO_TEST=$1;
  local RESULT_FILE_NAME="$2";# Optional. If empty, output goes to FD=1; stdout.
  local RUN_STATUS=0;
  local FD=1;
  if [ -n "${RESULT_FILE_NAME}" ] ; then 
    FD=$(lowest_unused_fd);
    eval "exec $FD>${RESULT_FILE_NAME}";
  fi;
  { if [ $(uname) = 'Darwin' ] ; then
      # Assumes "tcp" is only protocol that could take the port.
      #   lsof -iTCP:$PORT_TO_TEST -sTCP:LISTEN -P 
      { netstat -p tcp -van || 
            echo "Failed 'netstat -p tcp -van'" 1>&2; RUN_STATUS=1;
      } | grep LISTEN | grep "\.$PORT_TO_TEST " ;
    else
      # Opts: -t tcp, -u udp, -l listening, -p show pid & program, -n numeric
      { netstat -tulpn || 
           echo "Failed 'netstat -tulpn'" 1>&2; RUN_STATUS=1;
      } | grep ":$PORT_TO_TEST " ;
    fi;
  } >&$FD
  return $RUN_STATUS;
}

# function confirmPortIsAvailable  _____________________________________________
confirmPortIsAvailable() {
  local QUIET_MODE_FLAG="";
  if [ _$1 = "_-q" ] ; then
    QUIET_MODE_FLAG="yes";
    shift;
  fi;
  local PORT_TO_TEST=$1
  local NETSTAT_RESULT_FILE=$(mktemp);
  sayPortStatus $PORT_TO_TEST $NETSTAT_RESULT_FILE || return 2;
  if [ -s $NETSTAT_RESULT_FILE ] ; then
    # Got non-empty result
    if [ $QUIET_MODE_FLAG != "yes" ] ; then
      echo "netstat:"
      cat $NETSTAT_RESULT_FILE;
      echo "It appears a process is already listening on port '$PORT_TO_TEST'."
      echo "If it is an instance of '${daemonName}', perhaps you should run:"
      echo "   sudo $thisScript stop"
      echo "Port occupied, cannot proceed" 1>&2;
    fi;
    rm -f $NETSTAT_RESULT_FILE;
    return 1; # 'false', the port is not available
  fi;
  rm -f $NETSTAT_RESULT_FILE;
  return 0; # 'true', the port is available
}

# ------------------------------------------------------------------------------
pid_file_exists() {
    [ -f "$PID_FILE" ]
}

put_pid() {
    echo $1 > "$PID_FILE";
}

get_pid() {
    echo "$(< "$PID_FILE")"
}

remove_pid_file() {
    echo "Removing pid file"
    rm -f "$PID_FILE"
}

is_running() {
    PID="$(get_pid)"
    if [ $(uname) = 'Darwin' ] ; then
      # Could "vmmap" help here? Or is it proprietary?
      local LINE_COUNT=$( lsof -p $PID | wc -l );
      [ $LINE_COUNT -gt 0 ]
    else
      [ -d /proc/$PID ]
    fi
}

mention_log_files() {
    echo; echo "Current (or recent) log files:"
    ls -1 "$LOG_DIR/stdout.txt" "$LOG_DIR/stderr.txt";
}

mention_log_linkages() {
    echo; echo "Log file linkages:"
    ls -l "$LOG_DIR/stdout.txt" "$LOG_DIR/stderr.txt";
}

elaborate_log() {
    echo; echo "Current (or recent) log files:"
    ls -lL "$LOG_DIR/stdout.txt" "$LOG_DIR/stderr.txt";
    mention_log_linkages;
}

tail_log_files() {
    echo;
    echo "- - - - - - - - - - - - - --- ------ --- - - - - - - - - - - - - -";
    echo "v v v v v v v v v v v v v === stdout === v v v v v v v v v v v v v";
    tail -n ${TAIL_BY:-30} "$LOG_DIR/stdout.txt"
    echo;
    echo "- - - - - - - - - - - - - --- ------ --- - - - - - - - - - - - - -";
    echo "v v v v v v v v v v v v v === stderr === v v v v v v v v v v v v v";
    tail -n ${TAIL_BY:-30} "$LOG_DIR/stderr.txt";
    echo;
}

confirmSslReadable() {
    # For vars that are known and that represent files, either the var should be
    # be empty or it should point to a file that exists and is readable.
    confirmVarHasReadableFileName ssl_key ssl_cert ssl_ca_1 ssl_ca_2 || return 1;
    return 0;
}

start_it() {

    DATE_TIME_STAMP=$( date "+%Y-%m-%d-h%Hm%M" );
    DATE_STAMP=$( date "+%Y-%m-%d" );

    cd "$SERVER_DIR" || {
      echo "Error: Unable to 'cd $SERVER_DIR'"
      exit 1;
    }
    confirmPortIsAvailable ${nodeListenPort} || exit 1;

    # --------- do it ------------
    # Non-standard!
    # Other daemon start scripts do not use "nohup", they assume that
    # the program will detach itself.
    #
    # Non-standard!
    # Other daemon start scripts do not redirect stdout/stderr to log
    # files.
    echo "Starting $daemonName ..."
    nohup "$absolutePathToEXEC" "${nodeServerMainJs}" \
      1>"$LOG_DIR/$DATE_TIME_STAMP.stdout.txt" \
      2>"$LOG_DIR/$DATE_TIME_STAMP.stderr.txt" & 

    # Non-standard?
    # Some deamon start scripts do not collect pid and do not create 
    # the pid file?  Expect the exe to do it?
    SERVER_PID=$!

    if [ -z "$SERVER_PID" ] ; then
      echo -n "Error: Failure executing: "
      echo -n "nohup \"$absolutePathToEXEC\" \"${nodeServerMainJs}\" "
      echo -n " 1>\"$LOG_DIR/$DATE_TIME_STAMP.stdout.txt\" "
      echo -n " 2>\"$LOG_DIR/$DATE_TIME_STAMP.stderr.txt\" &";
      echo
      exit 1;
    fi;

    put_pid $SERVER_PID;

    ln -s -f "$LOG_DIR/$DATE_TIME_STAMP.stdout.txt" "$LOG_DIR/stdout.txt";
    ln -s -f "$LOG_DIR/$DATE_TIME_STAMP.stderr.txt" "$LOG_DIR/stderr.txt"; 

    echo "${daemonName} started with pid $SERVER_PID";
}

stop_process() {
    # Non-standard!
    # Presumes file contains a single pid.
    PID=$(get_pid)
    echo "Killing process $PID"
    kill $PID
    # In the real world, the following 'wait' always fails with err msg:
    #   -bash: wait: pid 21357 is not a child of this shell
    #wait $PID 2>/dev/null
    sleep 1;
}

start_app() {
    if pid_file_exists
    then
        if is_running
        then
            PID=$(get_pid)
            echo -n "${daemonName} already running with pid $PID. "
	    echo "(Maybe you wanted to 'restart'?)"
            exit 1
        else
	    mention_log_files;
	    echo;
            echo "${daemonName} status=stopped, but pid file exists"
            if [ $FORCE_OP = yes ]
            then
                echo;
                echo "Forcing start anyways"
                remove_pid_file
                start_it
	    else
		echo;
                echo "Might need to start with '--force' option, like this:";
		echo "    sudo $thisScript --force start"
            fi
        fi
    else
        start_it
    fi
}

stop_app() {
    if pid_file_exists
    then
        if is_running
        then
            echo "Stopping ${daemonName} ..."
            stop_process
            remove_pid_file
            echo "${daemonName} stopped"
        else
	    mention_log_files;
            echo;
            echo "${daemonName} already stopped, but pid file exists"
            if [ $FORCE_OP = yes ]
            then
                echo "Forcing removal of pid file ..."
                remove_pid_file
                echo "${daemonName} stopped"
            else
                exit 1
            fi
        fi
    else
	echo;
        echo "${daemonName} already stopped, pid file does not exist"
        exit 1
    fi
}

status_of_app() {
    echo "----------------------------------------------------------------";
    local NETSTAT_RESULT_FILE=$(mktemp);
    sayPortStatus ${nodeListenPort} ${NETSTAT_RESULT_FILE}
    echo "Status of port ${nodeListenPort}:"
    if [ -s "$NETSTAT_RESULT_FILE" ] ; then
      cat "$NETSTAT_RESULT_FILE";
      echo "Port is in use";
    else
      echo "Available"
    fi;
    rm -f "$NETSTAT_RESULT_FILE";
    if pid_file_exists
    then
        if is_running
        then
            PID=$(get_pid)
	    echo;
            echo "${daemonName} is running with pid $PID"
        else
	    mention_log_files;
	    echo;
            echo "${daemonName} status=stopped, but pid file exists"
	    echo;
	    echo "Use option '--force' to remove pid file, like this:"
	    echo "    sudo $thisScript --force stop"
        fi
    else
	echo;
        echo "${daemonName} status=stopped"
    fi
    echo
}

# function sayUsage  ___________________________________________________________
sayUsage() {
  echo    "Usage:"
  echo    "        $thisScript           (status|show_config|logs|lognames)"
  echo    "   sudo $thisScript [ --force ] (start|stop|restart)"
  echo    "        $thisScript [ -n {line_count} ]    dumplogs"
  echo    "        $thisScript  --help"
  return;
}

# ------------------------------------------------------------------------------

declare FORCE_OP=nope

declare PID_FILE="${PID_DIR}/${daemonName}.pid"

# ........................
# Parse the command line
# First, pull off any flags
while [ "$1" != "${1##[-+]}" ]; do 
  case $1 in 
    -f|--force)
	FORCE_OP=yes ; shift ;;
    -n)
	TAIL_BY=$2 ; shift 2 ;;
    -h|--help)
	sayUsage; exit 0 ;;
    *)		
	sayUsage;
	echo "Unrecognized option: $1";
	exit 1 ;;
  esac
done

# ........................
# The remaining token is the action to be taken.
case "$1" in
    start)
	checkConfig || exit 1;
	confirmSslReadable || exit 1;
        start_app
	;;

    stop)
	checkConfig || exit 1;
	confirmSslReadable || exit 1;
        stop_app
	;;

    restart)
	checkConfig || exit 1;
	confirmSslReadable || exit 1;
	FORCE_OP=yes;
        stop_app
	# Because this is a fresh run of the script, any updates to 
	# the config are already reflected in the script vars.
	# Just start again.
        start_app
	;;

    status)
        status_of_app
	;;

    logs|log|lognames|logname)
	elaborate_log
	;;

    dumplogs|dumplog)
	tail_log_files
	;;

    show_config)
	# The "showConfig" function can optionally take parameters, to 
	# augment the list of variables to be shown.
	# By default, "showConfig" presents those environment variables which
	# are defined and exported to "sysconfig", and are specific to the 
	# 'start-stop' tasks.  Additional variables can be added to this list
	# by simply naming them as arguments in the function call, like this:
	#
	#    showConfig  foo bar biz bam
	#
	# Or, in "sysconfig" do this:
	#
	#    declare additional_vars="foo bar biz bam"
	#
	# And then in this script:
	#
	#    showConfig  $additional_vars
	#
	showConfig $additional_vars
	exit 0;
	;;

    test_it)
	echo; echo "Did 'test_it'"; echo;
	;;

    *)
        sayUsage;
	declare BAD_REQUEST=$1;
	echo "Unrecognized request: ${BAD_REQUEST:-(no command parameter)}";
        exit 1
	;;
esac

exit 0; # success

